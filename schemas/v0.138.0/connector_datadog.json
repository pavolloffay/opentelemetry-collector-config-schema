{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "traces": {
      "description": "Traces defines the Traces specific configuration",
      "properties": {
        "bucket_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|Âµs|ms|s|m|h)$",
          "type": "string"
        },
        "compute_stats_by_span_kind": {
          "description": "If set to true, enables an additional stats computation check on spans to see they have an eligible `span.kind` (server, consumer, client, producer). If enabled, a span with an eligible `span.kind` will have stats computed. If disabled, only top-level and measured spans will have stats computed. NOTE: For stats computed from OTel traces, only top-level spans are considered when this option is off. If you are sending OTel traces and want stats on non-top-level spans, this flag will need to be enabled. If you are sending OTel traces and do not want stats computed by span kind, you need to disable this flag and disable `compute_top_level_by_span_kind`.",
          "type": "boolean"
        },
        "compute_top_level_by_span_kind": {
          "description": "If set to true, root spans and spans with a server or consumer `span.kind` will be marked as top-level. Additionally, spans with a client or producer `span.kind` will have stats computed. Enabling this config option may increase the number of spans that generate trace metrics, and may change which spans appear as top-level in Datadog. ComputeTopLevelBySpanKind needs to be enabled in both the Datadog connector and Datadog exporter configs if both components are being used. The default value is `false`.",
          "type": "boolean"
        },
        "ignore_missing_datadog_fields": {
          "description": "IgnoreMissingDatadogFields specifies whether we should recompute DD span fields if the corresponding \"datadog.\" namespaced span attributes are missing. If it is false (default), we will use the incoming \"datadog.\" namespaced OTLP span attributes to construct the DD span, and if they are missing, we will recompute them from the other OTLP semantic convention attributes. If it is true, we will only populate a field if its associated \"datadog.\" OTLP span attribute exists, otherwise we will leave it empty.",
          "type": "boolean"
        },
        "ignore_resources": {
          "description": "ignored resources A blacklist of regular expressions can be provided to disable certain traces based on their resource name all entries must be surrounded by double quotes and separated by commas. ignore_resources: [\"(GET|POST) /healthcheck\"]",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "peer_service_aggregation": {
          "description": "If set to true, enables `peer.service` aggregation in the exporter. If disabled, aggregated trace stats will not include `peer.service` as a dimension. For the best experience with `peer.service`, it is recommended to also enable `compute_stats_by_span_kind`. If enabling both causes the datadog exporter to consume too many resources, try disabling `compute_stats_by_span_kind` first. If the overhead remains high, it will be due to a high cardinality of `peer.service` values from the traces. You may need to check your instrumentation. Deprecated: Please use PeerTagsAggregation instead",
          "type": "boolean"
        },
        "peer_tags": {
          "description": "[BETA] Optional list of supplementary peer tags that go beyond the defaults. The Datadog backend validates all tags and will drop ones that are unapproved. The default set of peer tags can be found at https://github.com/DataDog/datadog-agent/blob/505170c4ac8c3cbff1a61cf5f84b28d835c91058/pkg/trace/stats/concentrator.go#L55.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "peer_tags_aggregation": {
          "description": "If set to true, enables aggregation of peer related tags (e.g., `peer.service`, `db.instance`, etc.) in the datadog exporter. If disabled, aggregated trace stats will not include these tags as dimensions on trace metrics. For the best experience with peer tags, Datadog also recommends enabling `compute_stats_by_span_kind`. If you are using an OTel tracer, it's best to have both enabled because client/producer spans with relevant peer tags may not be marked by the datadog exporter as top-level spans. If enabling both causes the datadog exporter to consume too many resources, try disabling `compute_stats_by_span_kind` first. A high cardinality of peer tags or APM resources can also contribute to higher CPU and memory consumption. You can check for the cardinality of these fields by making trace search queries in the Datadog UI. The default list of peer tags can be found in https://github.com/DataDog/datadog-agent/blob/main/pkg/trace/stats/concentrator.go.",
          "type": "boolean"
        },
        "resource_attributes_as_container_tags": {
          "description": "ResourceAttributesAsContainerTags specifies the list of resource attributes to be used as container tags.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_name_as_resource_name": {
          "description": "If set to true the OpenTelemetry span name will used in the Datadog resource name. If set to false the resource name will be filled with the instrumentation library name + span kind. The default value is `false`.",
          "type": "boolean"
        },
        "span_name_remappings": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "SpanNameRemappings is the map of datadog span names and preferred name to map to. This can be used to automatically map Datadog Span Operation Names to an updated value. All entries should be key/value pairs. span_name_remappings: io.opentelemetry.javaagent.spring.client: spring.client instrumentation:express.server: express go.opentelemetry.io_contrib_instrumentation_net_http_otelhttp.client: http.client",
          "type": "object"
        },
        "trace_buffer": {
          "description": "TraceBuffer specifies the number of Datadog Agent TracerPayloads to buffer before dropping. The default value is 1000.",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}