{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "proxyconfig": {
      "description": "ProxyServer defines configurations related to the local TCP proxy server.",
      "properties": {
        "aws_endpoint": {
          "description": "AWSEndpoint is the X-Ray service endpoint which the local TCP server forwards requests to.",
          "type": "string"
        },
        "dialer": {
          "description": "DialerConfig contains options for connecting to an address.",
          "properties": {
            "timeout": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            }
          },
          "type": "object"
        },
        "endpoint": {
          "description": "Endpoint configures the address for this network connection. The address has the form \"host:port\". The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. If the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or \"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
          "type": "string"
        },
        "local_mode": {
          "description": "LocalMode determines whether the EC2 instance metadata endpoint will be called or not. Set to `true` to skip EC2 instance metadata check.",
          "type": "boolean"
        },
        "proxy_address": {
          "description": "ProxyAddress defines the proxy address that the local TCP server forwards HTTP requests to AWS X-Ray backend through.",
          "type": "string"
        },
        "region": {
          "description": "Region is the AWS region the local TCP server forwards requests to.",
          "type": "string"
        },
        "role_arn": {
          "description": "RoleARN is the IAM role used by the local TCP server when communicating with the AWS X-Ray service.",
          "type": "string"
        },
        "service_name": {
          "description": "ServiceName determines which service the requests are sent to. will be default to `xray`. This is mandatory for SigV4",
          "type": "string"
        },
        "tls": {
          "description": "TLS struct exposes TLS client configuration when forwarding calls to the AWS X-Ray backend.",
          "properties": {
            "ca_file": {
              "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
              "type": "string"
            },
            "ca_pem": {
              "description": "In memory PEM encoded cert. (optional)",
              "type": "string"
            },
            "cert_file": {
              "description": "Path to the TLS cert to use for TLS required connections. (optional)",
              "type": "string"
            },
            "cert_pem": {
              "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
              "type": "string"
            },
            "cipher_suites": {
              "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "curve_preferences": {
              "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include_system_ca_certs_pool": {
              "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
              "type": "boolean"
            },
            "insecure": {
              "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
              "type": "boolean"
            },
            "insecure_skip_verify": {
              "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
              "type": "boolean"
            },
            "key_file": {
              "description": "Path to the TLS key to use for TLS required connections. (optional)",
              "type": "string"
            },
            "key_pem": {
              "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
              "type": "string"
            },
            "max_version": {
              "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
              "type": "string"
            },
            "min_version": {
              "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
              "type": "string"
            },
            "reload_interval": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "server_name_override": {
              "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
              "type": "string"
            },
            "tpm": {
              "description": "Trusted platform module configuration",
              "properties": {
                "auth": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "owner_auth": {
                  "type": "string"
                },
                "path": {
                  "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}