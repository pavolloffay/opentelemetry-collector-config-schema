{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "actions": {
      "description": "Actions specifies the list of attributes to act on. The set of actions are {INSERT, UPDATE, UPSERT, DELETE, HASH, EXTRACT, CONVERT}. This is a required field.",
      "items": {
        "properties": {
          "action": {
            "description": "Action specifies the type of action to perform. The set of values are {INSERT, UPDATE, UPSERT, DELETE, HASH}. Both lower case and upper case are supported. INSERT -  Inserts the key/value to attributes when the key does not exist. No action is applied to attributes where the key already exists. Either Value, FromAttribute or FromContext must be set. UPDATE -  Updates an existing key with a value. No action is applied to attributes where the key does not exist. Either Value, FromAttribute or FromContext must be set. UPSERT -  Performs insert or update action depending on the attributes containing the key. The key/value is inserted to attributes that did not originally have the key. The key/value is updated for attributes where the key already existed. Either Value, FromAttribute or FromContext must be set. DELETE  - Deletes the attribute. If the key doesn't exist, no action is performed. HASH    - Calculates the SHA-1 hash of an existing value and overwrites the value with its SHA-1 hash result. If the feature gate `coreinternal.attraction.hash.sha256` is enabled, it uses SHA2-256 instead. EXTRACT - Extracts values using a regular expression rule from the input 'key' to target keys specified in the 'rule'. If a target key already exists, it will be overridden. CONVERT  - converts the type of an existing attribute, if convertable This is a required field.",
            "type": "string"
          },
          "converted_type": {
            "description": "ConvertedType specifies the target type of an attribute to be converted If the key doesn't exist, no action is performed. If the value cannot be converted, the original value will be left as-is",
            "type": "string"
          },
          "from_attribute": {
            "description": "FromAttribute specifies the attribute to use to populate the value. If the attribute doesn't exist, no action is performed.",
            "type": "string"
          },
          "from_context": {
            "description": "FromContext specifies the context value to use to populate the value. The values would be searched in client.Info.Metadata. If the key doesn't exist, no action is performed. If the key has multiple values the values will be joined with `;` separator.",
            "type": "string"
          },
          "key": {
            "description": "Key specifies the attribute to act upon. This is a required field.",
            "type": "string"
          },
          "pattern": {
            "description": "A regex pattern must be specified for the action EXTRACT. It uses the attribute specified by `key' to extract values from The target keys are inferred based on the names of the matcher groups provided and the names will be inferred based on the values of the matcher group. Note: All subexpressions must have a name. Note: The value type of the source key must be a string. If it isn't, no extraction will occur.",
            "type": "string"
          },
          "value": {
            "additionalProperties": true,
            "description": "Value specifies the value to populate for the key. The type of the value is inferred from the configuration.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "exclude": {
      "description": "Exclude specifies when this processor will not be applied to the input data which match the specified properties. Note: The `exclude` properties are checked after the `include` properties, if they exist, are checked. If `include` isn't specified, the `exclude` properties are checked against all input data. This is an optional field. If neither `include` and `exclude` are set, all input data is processed. If `exclude` is set and `include` isn't set, then all the input data that does not match the properties in this structure are processed.",
      "properties": {
        "attributes": {
          "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "libraries": {
          "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "log_bodies": {
          "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "log_severity_number": {
          "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
          "properties": {
            "match_undefined": {
              "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
              "type": "boolean"
            },
            "min": {
              "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "log_severity_texts": {
          "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "match_type": {
          "type": "string"
        },
        "metric_names": {
          "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "regexp": {
          "properties": {
            "cacheenabled": {
              "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
              "type": "boolean"
            },
            "cachemaxnumentries": {
              "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "resources": {
          "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "services": {
          "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_kinds": {
          "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_names": {
          "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "include": {
      "description": "Include specifies the set of input data properties that must be present in order for this processor to apply to it. Note: If `exclude` is specified, the input data is compared against those properties after the `include` properties. This is an optional field. If neither `include` and `exclude` are set, all input data are processed. If `include` is set and `exclude` isn't set, then all input data matching the properties in this structure are processed.",
      "properties": {
        "attributes": {
          "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "libraries": {
          "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "log_bodies": {
          "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "log_severity_number": {
          "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
          "properties": {
            "match_undefined": {
              "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
              "type": "boolean"
            },
            "min": {
              "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "log_severity_texts": {
          "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "match_type": {
          "type": "string"
        },
        "metric_names": {
          "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "regexp": {
          "properties": {
            "cacheenabled": {
              "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
              "type": "boolean"
            },
            "cachemaxnumentries": {
              "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "resources": {
          "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "services": {
          "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_kinds": {
          "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_names": {
          "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}