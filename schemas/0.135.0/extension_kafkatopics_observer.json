{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "auth": {
      "description": "Authentication holds Kafka authentication details.",
      "properties": {
        "kerberos": {
          "description": "Kerberos holds Kerberos authentication configuration.",
          "properties": {
            "config_file": {
              "type": "string"
            },
            "disable_fast_negotiation": {
              "type": "boolean"
            },
            "keytab_file": {
              "type": "string"
            },
            "password": {
              "type": "string"
            },
            "realm": {
              "type": "string"
            },
            "service_name": {
              "type": "string"
            },
            "use_keytab": {
              "type": "boolean"
            },
            "username": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "plain_text": {
          "deprecated": true,
          "description": "PlainText is an alias for SASL/PLAIN authentication. Deprecated [v0.123.0]: use SASL with Mechanism set to PLAIN instead.",
          "properties": {
            "password": {
              "type": "string"
            },
            "username": {
              "type": "string"
            }
          },
          "type": "object"
        },
        "sasl": {
          "description": "SASL holds SASL authentication configuration.",
          "properties": {
            "aws_msk": {
              "description": "AWSMSK holds configuration specific to AWS MSK.",
              "properties": {
                "region": {
                  "description": "Region is the AWS region the MSK cluster is based in",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "mechanism": {
              "description": "SASL Mechanism to be used, possible values are: (PLAIN, AWS_MSK_IAM_OAUTHBEARER, SCRAM-SHA-256 or SCRAM-SHA-512).",
              "type": "string"
            },
            "password": {
              "description": "Password to be used on authentication",
              "type": "string"
            },
            "username": {
              "description": "Username to be used on authentication",
              "type": "string"
            },
            "version": {
              "description": "SASL Protocol Version to be used, possible values are: (0, 1). Defaults to 0.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "tls": {
          "deprecated": true,
          "description": "TLS holds TLS configuration for connecting to Kafka brokers. Deprecated [v0.124.0]: use ClientConfig.TLS instead. This will be used only if ClientConfig.TLS is not set.",
          "properties": {
            "ca_file": {
              "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
              "type": "string"
            },
            "ca_pem": {
              "description": "In memory PEM encoded cert. (optional)",
              "type": "string"
            },
            "cert_file": {
              "description": "Path to the TLS cert to use for TLS required connections. (optional)",
              "type": "string"
            },
            "cert_pem": {
              "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
              "type": "string"
            },
            "cipher_suites": {
              "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "curve_preferences": {
              "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include_system_ca_certs_pool": {
              "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
              "type": "boolean"
            },
            "insecure": {
              "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
              "type": "boolean"
            },
            "insecure_skip_verify": {
              "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
              "type": "boolean"
            },
            "key_file": {
              "description": "Path to the TLS key to use for TLS required connections. (optional)",
              "type": "string"
            },
            "key_pem": {
              "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
              "type": "string"
            },
            "max_version": {
              "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
              "type": "string"
            },
            "min_version": {
              "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
              "type": "string"
            },
            "reload_interval": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "server_name_override": {
              "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
              "type": "string"
            },
            "tpm": {
              "description": "Trusted platform module configuration",
              "properties": {
                "auth": {
                  "type": "string"
                },
                "enabled": {
                  "type": "boolean"
                },
                "owner_auth": {
                  "type": "string"
                },
                "path": {
                  "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "brokers": {
      "description": "Brokers holds the list of Kafka bootstrap servers (default localhost:9092).",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "client_id": {
      "description": "ClientID holds the client ID advertised to Kafka, which can be used for enforcing ACLs, throttling quotas, and more (default \"otel-collector\")",
      "type": "string"
    },
    "metadata": {
      "description": "Metadata holds metadata-related configuration for producers and consumers.",
      "properties": {
        "full": {
          "description": "Whether to maintain a full set of metadata for all topics, or just the minimal set that has been necessary so far. The full set is simpler and usually more convenient, but can take up a substantial amount of memory if you have many topics and partitions. Defaults to true.",
          "type": "boolean"
        },
        "refresh_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "retry": {
          "description": "Retry configuration for metadata. This configuration is useful to avoid race conditions when broker is starting at the same time as collector.",
          "properties": {
            "backoff": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "max": {
              "description": "The total number of times to retry a metadata request when the cluster is in the middle of a leader election or at startup (default 3).",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "protocol_version": {
      "description": "ProtocolVersion defines the Kafka protocol version that the client will assume it is running against.",
      "type": "string"
    },
    "rack_id": {
      "description": "RackID provides the rack identifier for this client to enable rack-aware replica selection when supported by the brokers. This maps to Kafka's standard \"client.rack\" setting. By default, this is empty.",
      "type": "string"
    },
    "resolve_canonical_bootstrap_servers_only": {
      "description": "ResolveCanonicalBootstrapServersOnly configures the Kafka client to perform a DNS lookup on each of the provided brokers, and then perform a reverse lookup on the resulting IPs to obtain the canonical hostnames to use as the bootstrap servers. This can be required in SASL environments.",
      "type": "boolean"
    },
    "tls": {
      "description": "TLS holds TLS-related configuration for connecting to Kafka brokers. By default the client will use an insecure connection unless SASL/AWS_MSK_IAM_OAUTHBEARER auth is configured.",
      "properties": {
        "ca_file": {
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
          "type": "string"
        },
        "ca_pem": {
          "description": "In memory PEM encoded cert. (optional)",
          "type": "string"
        },
        "cert_file": {
          "description": "Path to the TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cert_pem": {
          "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cipher_suites": {
          "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "curve_preferences": {
          "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include_system_ca_certs_pool": {
          "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
          "type": "boolean"
        },
        "insecure": {
          "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
          "type": "boolean"
        },
        "insecure_skip_verify": {
          "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
          "type": "boolean"
        },
        "key_file": {
          "description": "Path to the TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "key_pem": {
          "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "max_version": {
          "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
          "type": "string"
        },
        "min_version": {
          "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
          "type": "string"
        },
        "reload_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "server_name_override": {
          "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
          "type": "string"
        },
        "tpm": {
          "description": "Trusted platform module configuration",
          "properties": {
            "auth": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "owner_auth": {
              "type": "string"
            },
            "path": {
              "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "topic_regex": {
      "type": "string"
    },
    "topics_sync_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    }
  },
  "type": "object"
}