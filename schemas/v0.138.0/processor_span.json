{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "exclude": {
      "description": "Exclude specifies when this processor will not be applied to the input data which match the specified properties. Note: The `exclude` properties are checked after the `include` properties, if they exist, are checked. If `include` isn't specified, the `exclude` properties are checked against all input data. This is an optional field. If neither `include` and `exclude` are set, all input data is processed. If `exclude` is set and `include` isn't set, then all the input data that does not match the properties in this structure are processed.",
      "properties": {
        "attributes": {
          "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "libraries": {
          "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "log_bodies": {
          "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "log_severity_number": {
          "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
          "properties": {
            "match_undefined": {
              "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
              "type": "boolean"
            },
            "min": {
              "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "log_severity_texts": {
          "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "match_type": {
          "type": "string"
        },
        "metric_names": {
          "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "regexp": {
          "properties": {
            "cacheenabled": {
              "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
              "type": "boolean"
            },
            "cachemaxnumentries": {
              "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "resources": {
          "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "services": {
          "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_kinds": {
          "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_names": {
          "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "include": {
      "description": "Include specifies the set of input data properties that must be present in order for this processor to apply to it. Note: If `exclude` is specified, the input data is compared against those properties after the `include` properties. This is an optional field. If neither `include` and `exclude` are set, all input data are processed. If `include` is set and `exclude` isn't set, then all input data matching the properties in this structure are processed.",
      "properties": {
        "attributes": {
          "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "libraries": {
          "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "log_bodies": {
          "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "log_severity_number": {
          "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
          "properties": {
            "match_undefined": {
              "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
              "type": "boolean"
            },
            "min": {
              "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "log_severity_texts": {
          "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "match_type": {
          "type": "string"
        },
        "metric_names": {
          "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "regexp": {
          "properties": {
            "cacheenabled": {
              "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
              "type": "boolean"
            },
            "cachemaxnumentries": {
              "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "resources": {
          "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
          "items": {
            "properties": {
              "key": {
                "description": "Key specifies the attribute key.",
                "type": "string"
              },
              "value": {
                "additionalProperties": true,
                "description": "Values specifies the value to match against. If it is not set, any value will match.",
                "type": "object"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "services": {
          "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_kinds": {
          "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "span_names": {
          "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "name": {
      "description": "Rename specifies the components required to re-name a span. The `from_attributes` field needs to be set for this processor to be properly configured. Note: The field name is `Rename` to avoid collision with the Name() method from config.NamedEntity",
      "properties": {
        "from_attributes": {
          "description": "FromAttributes represents the attribute keys to pull the values from to generate the new span name. All attribute keys are required in the span to re-name a span. If any attribute is missing from the span, no re-name will occur. Note: The new span name is constructed in order of the `from_attributes` specified in the configuration. This field is required and cannot be empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "separator": {
          "description": "Separator is the string used to separate attributes values in the new span name. If no value is set, no separator is used between attribute values. Used with FromAttributes only.",
          "type": "string"
        },
        "to_attributes": {
          "description": "ToAttributes specifies a configuration to extract attributes from span name.",
          "properties": {
            "break_after_match": {
              "description": "BreakAfterMatch specifies if processing of rules should stop after the first match. If it is false rule processing will continue to be performed over the modified span name.",
              "type": "boolean"
            },
            "keep_original_name": {
              "description": "KeepOriginalName specifies if the original span name should be kept after processing the rules. If it is true the original span name will be kept, otherwise it will be replaced with the placeholders of the captured attributes.",
              "type": "boolean"
            },
            "rules": {
              "description": "Rules is a list of rules to extract attribute values from span name. The values in the span name are replaced by extracted attribute names. Each rule in the list is a regex pattern string. Span name is checked against the regex. If it matches then all named subexpressions of the regex are extracted as attributes and are added to the span. Each subexpression name becomes an attribute name and subexpression matched portion becomes the attribute value. The matched portion in the span name is replaced by extracted attribute name. If the attributes already exist in the span then they will be overwritten. The process is repeated for all rules in the order they are specified. Each subsequent rule works on the span name that is the output after processing the previous rule.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "status": {
      "description": "SetStatus specifies status which should be set for this span.",
      "properties": {
        "code": {
          "description": "Code is one of three values \"Ok\" or \"Error\" or \"Unset\". Please check: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional field documenting Error statuses.",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}