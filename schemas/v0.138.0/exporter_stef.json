{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "auth": {
      "properties": {
        "authenticator": {
          "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "authority": {
      "description": "WithAuthority parameter configures client to rewrite \":authority\" header (godoc.org/google.golang.org/grpc#WithAuthority)",
      "type": "string"
    },
    "balancer_name": {
      "description": "Sets the balancer in grpclb_policy to discover the servers. Default is pick_first. https://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md",
      "type": "string"
    },
    "compression": {
      "description": "The compression key for supported compression types within collector.",
      "type": "string"
    },
    "endpoint": {
      "description": "The target to which the exporter is going to send traces or metrics, using the gRPC protocol. The valid syntax is described at https://github.com/grpc/grpc/blob/master/doc/naming.md.",
      "type": "string"
    },
    "headers": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "The headers associated with gRPC requests.",
      "type": "object"
    },
    "keepalive": {
      "properties": {
        "permit_without_stream": {
          "type": "boolean"
        },
        "time": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "timeout": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "middlewares": {
      "description": "Middlewares for the gRPC client.",
      "items": {
        "properties": {
          "id": {
            "description": "ID specifies the name of the extension to use.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "read_buffer_size": {
      "description": "ReadBufferSize for gRPC client. See grpc.WithReadBufferSize. (https://godoc.org/google.golang.org/grpc#WithReadBufferSize).",
      "type": "integer"
    },
    "retry_on_failure": {
      "properties": {
        "enabled": {
          "description": "Enabled indicates whether to not retry sending batches in case of export failure.",
          "type": "boolean"
        },
        "initial_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "max_elapsed_time": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "max_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "multiplier": {
          "description": "Multiplier is the value multiplied by the backoff interval bounds",
          "type": "number"
        },
        "randomization_factor": {
          "description": "RandomizationFactor is a random factor used to calculate next backoffs Randomized interval = RetryInterval * (1 ± RandomizationFactor)",
          "type": "number"
        }
      },
      "type": "object"
    },
    "sending_queue": {
      "properties": {
        "batch": {
          "properties": {
            "flush_timeout": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "max_size": {
              "description": "MaxSize defines the configuration for the maximum size of a batch.",
              "type": "integer"
            },
            "min_size": {
              "description": "MinSize defines the configuration for the minimum size of a batch.",
              "type": "integer"
            },
            "sizer": {
              "description": "Sizer determines the type of size measurement used by the batch. If not configured, use the same configuration as the queue. It accepts \"requests\", \"items\", or \"bytes\".",
              "type": "object"
            }
          },
          "type": "object"
        },
        "block_on_overflow": {
          "description": "BlockOnOverflow determines the behavior when the component's TotalSize limit is reached. If true, the component will wait for space; otherwise, operations will immediately return a retryable error.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enabled indicates whether to not enqueue and batch before exporting.",
          "type": "boolean"
        },
        "num_consumers": {
          "description": "NumConsumers is the maximum number of concurrent consumers from the queue. This applies across all different optional configurations from above (e.g. wait_for_result, block_on_overflow, storage, etc.).",
          "type": "integer"
        },
        "queue_size": {
          "description": "QueueSize represents the maximum data size allowed for concurrent storage and processing.",
          "type": "integer"
        },
        "sizer": {
          "description": "Sizer determines the type of size measurement used by this component. It accepts \"requests\", \"items\", or \"bytes\".",
          "type": "object"
        },
        "storage": {
          "description": "StorageID if not empty, enables the persistent storage and uses the component specified as a storage extension for the persistent queue. TODO: This will be changed to Optional when available. See https://github.com/open-telemetry/opentelemetry-collector/issues/13822",
          "type": "object"
        },
        "wait_for_result": {
          "description": "WaitForResult determines if incoming requests are blocked until the request is processed or not. Currently, this option is not available when persistent queue is configured using the storage configuration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "tls": {
      "description": "TLS struct exposes TLS client configuration.",
      "properties": {
        "ca_file": {
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
          "type": "string"
        },
        "ca_pem": {
          "description": "In memory PEM encoded cert. (optional)",
          "type": "string"
        },
        "cert_file": {
          "description": "Path to the TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cert_pem": {
          "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cipher_suites": {
          "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "curve_preferences": {
          "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include_system_ca_certs_pool": {
          "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
          "type": "boolean"
        },
        "insecure": {
          "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
          "type": "boolean"
        },
        "insecure_skip_verify": {
          "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
          "type": "boolean"
        },
        "key_file": {
          "description": "Path to the TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "key_pem": {
          "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "max_version": {
          "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
          "type": "string"
        },
        "min_version": {
          "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
          "type": "string"
        },
        "reload_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "server_name_override": {
          "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
          "type": "string"
        },
        "tpm": {
          "description": "Trusted platform module configuration",
          "properties": {
            "auth": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "owner_auth": {
              "type": "string"
            },
            "path": {
              "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "wait_for_ready": {
      "description": "WaitForReady parameter configures client to wait for ready state before sending data. (https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)",
      "type": "boolean"
    },
    "write_buffer_size": {
      "description": "WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize. (https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).",
      "type": "integer"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}