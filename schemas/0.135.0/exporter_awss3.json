{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "encoding": {
      "description": "Encoding to apply. If present, overrides the marshaler configuration option.",
      "type": "object"
    },
    "encoding_file_extension": {
      "type": "string"
    },
    "marshaler": {
      "type": "string"
    },
    "resource_attrs_to_s3": {
      "properties": {
        "s3_bucket": {
          "description": "S3Bucket indicates the mapping of the bucket name used for uploading to a specific resource attribute value.",
          "type": "string"
        },
        "s3_prefix": {
          "description": "S3Prefix indicates the mapping of the key (directory) prefix used for writing into the bucket to a specific resource attribute value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "s3uploader": {
      "properties": {
        "acl": {
          "description": "ACL is the canned ACL to use when uploading objects.",
          "type": "string"
        },
        "compression": {
          "description": "Compression sets the algorithm used to process the payload before uploading to S3. Valid values are: `gzip` or no value set.",
          "type": "string"
        },
        "disable_ssl": {
          "description": "DisableSLL forces communication to happen via HTTP instead of HTTPS.",
          "type": "boolean"
        },
        "endpoint": {
          "description": "Endpoint is the URL used for communicated with S3.",
          "type": "string"
        },
        "file_prefix": {
          "description": "FilePrefix is the filename prefix used for the file to avoid any potential collisions.",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "retry_max_attempts": {
          "description": "RetryMaxAttempts specifies the maximum number of attempts for S3 client. Default is 3 (SDK default).",
          "type": "integer"
        },
        "retry_max_backoff": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "retry_mode": {
          "description": "RetryMode specifies the retry mode for S3 client, default is \"standard\". Valid values are: \"standard\", \"adaptive\", or \"nop\". \"nop\" will disable retry by setting the retryer to aws.NopRetryer.",
          "type": "string"
        },
        "role_arn": {
          "description": "RoleArn is the role policy to use when interacting with S3",
          "type": "string"
        },
        "s3_bucket": {
          "description": "S3Bucket is the bucket name to be uploaded to.",
          "type": "string"
        },
        "s3_force_path_style": {
          "description": "S3ForcePathStyle sets the value for force path style.",
          "type": "boolean"
        },
        "s3_partition_format": {
          "description": "S3PartitionFormat is used to provide the rollup on how data is written. Uses [strftime](https://www.man7.org/linux/man-pages/man3/strftime.3.html) formatting.",
          "type": "string"
        },
        "s3_prefix": {
          "description": "S3Prefix is the key (directory) prefix to written to inside the bucket",
          "type": "string"
        },
        "storage_class": {
          "type": "string"
        },
        "unique_key_func_name": {
          "description": "UniqueKeyFuncName specifies a function to use for generating a unique string as part of the S3 key. If unspecified, a default function will be used that generates a random string. Valid values are: \"uuidv7\"",
          "type": "string"
        }
      },
      "type": "object"
    },
    "sending_queue": {
      "properties": {
        "batch": {
          "properties": {
            "flush_timeout": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "max_size": {
              "description": "MaxSize defines the configuration for the maximum size of a batch.",
              "type": "integer"
            },
            "min_size": {
              "description": "MinSize defines the configuration for the minimum size of a batch.",
              "type": "integer"
            },
            "sizer": {
              "description": "Sizer determines the type of size measurement used by the batch. If not configured, use the same configuration as the queue. It accepts \"requests\", \"items\", or \"bytes\".",
              "type": "object"
            }
          },
          "type": "object"
        },
        "block_on_overflow": {
          "description": "BlockOnOverflow determines the behavior when the component's TotalSize limit is reached. If true, the component will wait for space; otherwise, operations will immediately return a retryable error.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enabled indicates whether to not enqueue and batch before exporting.",
          "type": "boolean"
        },
        "num_consumers": {
          "description": "NumConsumers is the maximum number of concurrent consumers from the queue. This applies across all different optional configurations from above (e.g. wait_for_result, blockOnOverflow, persistent, etc.). TODO: This will also control the maximum number of shards, when supported: https://github.com/open-telemetry/opentelemetry-collector/issues/12473.",
          "type": "integer"
        },
        "queue_size": {
          "description": "QueueSize represents the maximum data size allowed for concurrent storage and processing.",
          "type": "integer"
        },
        "sizer": {
          "description": "Sizer determines the type of size measurement used by this component. It accepts \"requests\", \"items\", or \"bytes\".",
          "type": "object"
        },
        "storage": {
          "description": "StorageID if not empty, enables the persistent storage and uses the component specified as a storage extension for the persistent queue. TODO: This will be changed to Optional when available.",
          "type": "object"
        },
        "wait_for_result": {
          "description": "WaitForResult determines if incoming requests are blocked until the request is processed or not. Currently, this option is not available when persistent queue is configured using the storage configuration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "timeoutsettings": {
      "description": "squash ensures fields are correctly decoded in embedded struct.",
      "properties": {
        "timeout": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}