{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "auth": {
      "properties": {
        "authenticator": {
          "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "batcher": {
      "deprecated": true,
      "description": "DeprecatedBatcher is the deprecated batcher configuration.",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "flush_timeout": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "max_size": {
          "type": "integer"
        },
        "min_size": {
          "type": "integer"
        },
        "sizer": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "compression": {
      "description": "The compression key for supported compression types within collector.",
      "type": "string"
    },
    "compression_params": {
      "description": "Advanced configuration options for the Compression",
      "properties": {
        "level": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "cookies": {
      "description": "Cookies configures the cookie management of the HTTP client.",
      "properties": {
        "enabled": {
          "description": "Enabled if true, cookies from HTTP responses will be reused in further HTTP requests with the same server.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "disable_compression": {
      "description": "Disable GZip compression. Defaults to false.",
      "type": "boolean"
    },
    "disable_keep_alives": {
      "description": "DisableKeepAlives, if true, disables HTTP keep-alives and will only use the connection to the server for a single HTTP request. WARNING: enabling this option can result in significant overhead establishing a new HTTP(S) connection for every request. Before enabling this option please consider whether changes to idle connection settings can achieve your goal.",
      "type": "boolean"
    },
    "enabled": {
      "description": "Enabled indicates whether to not retry sending batches in case of export failure.",
      "type": "boolean"
    },
    "endpoint": {
      "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
      "type": "string"
    },
    "export_raw": {
      "description": "ExportRaw to send only the log's body, targeting a Splunk HEC raw endpoint.",
      "type": "boolean"
    },
    "force_attempt_http2": {
      "description": "Enabling ForceAttemptHTTP2 forces the HTTP transport to use the HTTP/2 protocol. By default, this is set to true. NOTE: HTTP/2 does not support settings such as MaxConnsPerHost, MaxIdleConnsPerHost and MaxIdleConns.",
      "type": "boolean"
    },
    "headers": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Additional headers attached to each HTTP request sent by the client. Existing header values are overwritten if collision happens. Header values are opaque since they may be sensitive.",
      "type": "object"
    },
    "health_check_enabled": {
      "description": "HecHealthCheckEnabled can be used to verify Splunk HEC health on exporter's startup",
      "type": "boolean"
    },
    "health_path": {
      "description": "HealthPath for health API, default is '/services/collector/health'",
      "type": "string"
    },
    "heartbeat": {
      "description": "Heartbeat is the configuration to enable heartbeat",
      "properties": {
        "interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "startup": {
          "description": "Startup is used to send heartbeat events on exporter's startup.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "hec_metadata_to_otel_attrs": {
      "deprecated": true,
      "description": "HecToOtelAttrs creates a mapping from attributes to HEC specific metadata: source, sourcetype, index and host. Deprecated: [v0.113.0] Use OtelAttrsToHec instead.",
      "properties": {
        "host": {
          "description": "Host indicates the mapping of the host field to a specific unified model attribute.",
          "type": "string"
        },
        "index": {
          "description": "Index indicates the mapping of the index field to a specific unified model attribute.",
          "type": "string"
        },
        "source": {
          "description": "Source indicates the mapping of the source field to a specific unified model attribute.",
          "type": "string"
        },
        "sourcetype": {
          "description": "SourceType indicates the mapping of the sourcetype field to a specific unified model attribute.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "http2_ping_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "http2_read_idle_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "idle_conn_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "index": {
      "description": "Splunk index, optional name of the Splunk index.",
      "type": "string"
    },
    "initial_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "log_data_enabled": {
      "description": "LogDataEnabled can be used to disable sending logs by the exporter.",
      "type": "boolean"
    },
    "max_conns_per_host": {
      "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing, active, and idle states. Default is 0 (unlimited).",
      "type": "integer"
    },
    "max_content_length_logs": {
      "description": "Maximum log payload size in bytes. Default value is 2097152 bytes (2MiB). Maximum allowed value is 838860800 (~ 800 MB).",
      "type": "integer"
    },
    "max_content_length_metrics": {
      "description": "Maximum metric payload size in bytes. Default value is 2097152 bytes (2MiB). Maximum allowed value is 838860800 (~ 800 MB).",
      "type": "integer"
    },
    "max_content_length_traces": {
      "description": "Maximum trace payload size in bytes. Default value is 2097152 bytes (2MiB). Maximum allowed value is 838860800 (~ 800 MB).",
      "type": "integer"
    },
    "max_elapsed_time": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "max_event_size": {
      "description": "Maximum payload size, raw uncompressed. Default value is 5242880 bytes (5MiB). Maximum allowed value is 838860800 (~ 800 MB).",
      "type": "integer"
    },
    "max_idle_conns": {
      "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open. By default, it is set to 100. Zero means no limit.",
      "type": "integer"
    },
    "max_idle_conns_per_host": {
      "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open. Default is 0 (unlimited).",
      "type": "integer"
    },
    "max_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "middlewares": {
      "description": "Middlewares are used to add custom functionality to the HTTP client. Middleware handlers are called in the order they appear in this list, with the first middleware becoming the outermost handler.",
      "items": {
        "properties": {
          "id": {
            "description": "ID specifies the name of the extension to use.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "multiplier": {
      "description": "Multiplier is the value multiplied by the backoff interval bounds",
      "type": "number"
    },
    "otel_attrs_to_hec_metadata": {
      "description": "OtelAttrsToHec creates a mapping from attributes to HEC specific metadata: source, sourcetype, index and host.",
      "properties": {
        "host": {
          "description": "Host indicates the mapping of the host field to a specific unified model attribute.",
          "type": "string"
        },
        "index": {
          "description": "Index indicates the mapping of the index field to a specific unified model attribute.",
          "type": "string"
        },
        "source": {
          "description": "Source indicates the mapping of the source field to a specific unified model attribute.",
          "type": "string"
        },
        "sourcetype": {
          "description": "SourceType indicates the mapping of the sourcetype field to a specific unified model attribute.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "otel_to_hec_fields": {
      "description": "HecFields creates a mapping from attributes to HEC fields.",
      "properties": {
        "severity_number": {
          "description": "SeverityNumber informs the exporter to map the severity number field to a specific HEC field.",
          "type": "string"
        },
        "severity_text": {
          "description": "SeverityText informs the exporter to map the severity text field to a specific HEC field.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "profiling_data_enabled": {
      "description": "ProfilingDataEnabled can be used to disable sending profiling data by the exporter.",
      "type": "boolean"
    },
    "proxy_url": {
      "description": "ProxyURL setting for the collector",
      "type": "string"
    },
    "randomization_factor": {
      "description": "RandomizationFactor is a random factor used to calculate next backoffs Randomized interval = RetryInterval * (1 ± RandomizationFactor)",
      "type": "number"
    },
    "read_buffer_size": {
      "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize. Default is 0.",
      "type": "integer"
    },
    "sending_queue": {
      "properties": {
        "batch": {
          "properties": {
            "flush_timeout": {
              "description": "Duration string (e.g., '1s', '5m', '1h')",
              "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
              "type": "string"
            },
            "max_size": {
              "description": "MaxSize defines the configuration for the maximum size of a batch.",
              "type": "integer"
            },
            "min_size": {
              "description": "MinSize defines the configuration for the minimum size of a batch.",
              "type": "integer"
            },
            "sizer": {
              "description": "Sizer determines the type of size measurement used by the batch. If not configured, use the same configuration as the queue. It accepts \"requests\", \"items\", or \"bytes\".",
              "type": "object"
            }
          },
          "type": "object"
        },
        "block_on_overflow": {
          "description": "BlockOnOverflow determines the behavior when the component's TotalSize limit is reached. If true, the component will wait for space; otherwise, operations will immediately return a retryable error.",
          "type": "boolean"
        },
        "enabled": {
          "description": "Enabled indicates whether to not enqueue and batch before exporting.",
          "type": "boolean"
        },
        "num_consumers": {
          "description": "NumConsumers is the maximum number of concurrent consumers from the queue. This applies across all different optional configurations from above (e.g. wait_for_result, block_on_overflow, storage, etc.).",
          "type": "integer"
        },
        "queue_size": {
          "description": "QueueSize represents the maximum data size allowed for concurrent storage and processing.",
          "type": "integer"
        },
        "sizer": {
          "description": "Sizer determines the type of size measurement used by this component. It accepts \"requests\", \"items\", or \"bytes\".",
          "type": "object"
        },
        "storage": {
          "description": "StorageID if not empty, enables the persistent storage and uses the component specified as a storage extension for the persistent queue. TODO: This will be changed to Optional when available. See https://github.com/open-telemetry/opentelemetry-collector/issues/13822",
          "type": "object"
        },
        "wait_for_result": {
          "description": "WaitForResult determines if incoming requests are blocked until the request is processed or not. Currently, this option is not available when persistent queue is configured using the storage configuration.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "source": {
      "description": "Optional Splunk source: https://docs.splunk.com/Splexicon:Source. Sources identify the incoming data.",
      "type": "string"
    },
    "sourcetype": {
      "description": "Optional Splunk source type: https://docs.splunk.com/Splexicon:Sourcetype.",
      "type": "string"
    },
    "splunk_app_name": {
      "description": "App name is used to track telemetry information for Splunk App's using HEC by App name. Defaults to \"OpenTelemetry Collector Contrib\".",
      "type": "string"
    },
    "splunk_app_version": {
      "description": "App version is used to track telemetry information for Splunk App's using HEC by App version. Defaults to the current OpenTelemetry Collector Contrib build version.",
      "type": "string"
    },
    "telemetry": {
      "description": "Telemetry is the configuration for splunk hec exporter telemetry",
      "properties": {
        "enabled": {
          "description": "Enabled is the bool to enable telemetry inside splunk hec exporter",
          "type": "boolean"
        },
        "extra_attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "ExtraAttributes is the extra attributes for metrics inside splunk hex exporter",
          "type": "object"
        },
        "override_metrics_names": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "OverrideMetricsNames is the map to override metrics for internal metrics in splunk hec exporter",
          "type": "object"
        }
      },
      "type": "object"
    },
    "timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "tls": {
      "description": "TLS struct exposes TLS client configuration.",
      "properties": {
        "ca_file": {
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
          "type": "string"
        },
        "ca_pem": {
          "description": "In memory PEM encoded cert. (optional)",
          "type": "string"
        },
        "cert_file": {
          "description": "Path to the TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cert_pem": {
          "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cipher_suites": {
          "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "curve_preferences": {
          "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include_system_ca_certs_pool": {
          "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
          "type": "boolean"
        },
        "insecure": {
          "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
          "type": "boolean"
        },
        "insecure_skip_verify": {
          "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
          "type": "boolean"
        },
        "key_file": {
          "description": "Path to the TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "key_pem": {
          "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "max_version": {
          "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
          "type": "string"
        },
        "min_version": {
          "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
          "type": "string"
        },
        "reload_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "server_name_override": {
          "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
          "type": "string"
        },
        "tpm": {
          "description": "Trusted platform module configuration",
          "properties": {
            "auth": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "owner_auth": {
              "type": "string"
            },
            "path": {
              "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "token": {
      "description": "HEC Token is the authentication token provided by Splunk: https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector.",
      "type": "string"
    },
    "use_multi_metric_format": {
      "description": "UseMultiMetricFormat combines metric events to save space during ingestion.",
      "type": "boolean"
    },
    "write_buffer_size": {
      "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize. Default is 0.",
      "type": "integer"
    }
  },
  "type": "object"
}