{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "aggregation_cardinality_limit": {
      "type": "integer"
    },
    "aggregation_temporality": {
      "type": "string"
    },
    "calls_dimensions": {
      "items": {
        "properties": {
          "default": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "dimensions": {
      "description": "Dimensions defines the list of additional dimensions on top of the provided: - service.name - span.kind - span.kind - status.code - collector.instance.id This dimensions never added unless enable feature-gate connector.spanmetrics.includeCollectorInstanceID The dimensions will be fetched from the span's attributes. Examples of some conventionally used attributes: https://github.com/open-telemetry/opentelemetry-collector/blob/main/model/semconv/opentelemetry.go.",
      "items": {
        "properties": {
          "default": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "dimensions_cache_size": {
      "deprecated": true,
      "description": "DimensionsCacheSize defines the size of cache for storing Dimensions, which helps to avoid cache memory growing indefinitely over the lifetime of the collector. Optional. See defaultDimensionsCacheSize in connector.go for the default value. Deprecated [v0.130.0]:  Please use AggregationCardinalityLimit instead",
      "type": "integer"
    },
    "events": {
      "description": "Events defines the configuration for events section of spans.",
      "properties": {
        "dimensions": {
          "description": "Dimensions defines the list of dimensions to add to the events metric.",
          "items": {
            "properties": {
              "default": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "enabled": {
          "description": "Enabled is a flag to enable events.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "exclude_dimensions": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "exemplars": {
      "description": "Exemplars defines the configuration for exemplars.",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "max_per_data_point": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "histogram": {
      "properties": {
        "dimensions": {
          "items": {
            "properties": {
              "default": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "disable": {
          "type": "boolean"
        },
        "explicit": {
          "properties": {
            "buckets": {
              "description": "Buckets is the list of durations representing explicit histogram buckets.",
              "items": {
                "description": "Duration string (e.g., '1s', '5m', '1h')",
                "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "exponential": {
          "properties": {
            "max_size": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "unit": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "include_instrumentation_scope": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "metric_timestamp_cache_size": {
      "description": "TimestampCacheSize controls the size of the cache used to keep track of delta metrics' TimestampUnixNano the last time it was flushed",
      "type": "integer"
    },
    "metrics_expiration": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "metrics_flush_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "namespace": {
      "description": "Namespace is the namespace of the metrics emitted by the connector.",
      "type": "string"
    },
    "resource_metrics_cache_size": {
      "description": "ResourceMetricsCacheSize defines the size of the cache holding metrics for a service. This is mostly relevant for cumulative temporality to avoid memory leaks and correct metric timestamp resets. Optional. See defaultResourceMetricsCacheSize in connector.go for the default value.",
      "type": "integer"
    },
    "resource_metrics_key_attributes": {
      "description": "ResourceMetricsKeyAttributes filters the resource attributes used to create the resource metrics key hash. This can be used to avoid situations where resource attributes may change across service restarts, causing metric counters to break (and duplicate). A resource does not need to have all of the attributes. The list must include enough attributes to properly identify unique resources or risk aggregating data from more than one service and span. e.g. [\"service.name\", \"telemetry.sdk.language\", \"telemetry.sdk.name\"] See https://opentelemetry.io/docs/specs/semconv/resource/ for possible attributes.",
      "items": {
        "type": "string"
      },
      "type": "array"
    }
  },
  "type": "object"
}