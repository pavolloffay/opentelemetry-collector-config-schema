{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "auth_type": {
      "description": "How to authenticate to the K8s API server.  This can be one of `none` (for no auth), `serviceAccount` (to use the standard service account token provided to the agent pod), or `kubeConfig` to use credentials from `~/.kube/config`.",
      "type": "string"
    },
    "context": {
      "description": "When using auth_type `kubeConfig`, override the current context.",
      "type": "string"
    },
    "exclude": {
      "description": "Exclude section allows to define names of pod that should be ignored while tagging.",
      "properties": {
        "pods": {
          "items": {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "extract": {
      "description": "Extract section allows specifying extraction rules to extract data from k8s pod specs",
      "properties": {
        "annotations": {
          "description": "Annotations allows extracting data from pod annotations and record it as resource attributes. It is a list of FieldExtractConfig type. See FieldExtractConfig documentation for more details.",
          "items": {
            "properties": {
              "from": {
                "description": "From represents the source of the labels/annotations. Allowed values are \"pod\", \"namespace\", and \"node\". The default is pod.",
                "type": "string"
              },
              "key": {
                "description": "Key represents the annotation (or label) name. This must exactly match an annotation (or label) name.",
                "type": "string"
              },
              "key_regex": {
                "description": "KeyRegex is a regular expression used to extract a Key that matches the regex. Out of Key or KeyRegex, only one option is expected to be configured at a time.",
                "type": "string"
              },
              "tag_name": {
                "description": "TagName represents the name of the resource attribute that will be added to logs, metrics or spans. When not specified, a default tag name will be used of the format: - k8s.pod.annotations.\u003cannotation key\u003e - k8s.pod.labels.\u003clabel key\u003e For example, if tag_name is not specified and the key is git_sha, then the attribute name will be `k8s.pod.annotations.git_sha`. When key_regex is present, tag_name supports back reference to both named capturing and positioned capturing. For example, if your pod spec contains the following labels, app.kubernetes.io/component: mysql app.kubernetes.io/version: 5.7.21 and you'd like to add tags for all labels with prefix app.kubernetes.io/ and also trim the prefix, then you can specify the following extraction rules: extract: labels: - tag_name: $$1 key_regex: kubernetes.io/(.*) this will add the `component` and `version` tags to the spans or metrics.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "labels": {
          "description": "Labels allows extracting data from pod labels and record it as resource attributes. It is a list of FieldExtractConfig type. See FieldExtractConfig documentation for more details.",
          "items": {
            "properties": {
              "from": {
                "description": "From represents the source of the labels/annotations. Allowed values are \"pod\", \"namespace\", and \"node\". The default is pod.",
                "type": "string"
              },
              "key": {
                "description": "Key represents the annotation (or label) name. This must exactly match an annotation (or label) name.",
                "type": "string"
              },
              "key_regex": {
                "description": "KeyRegex is a regular expression used to extract a Key that matches the regex. Out of Key or KeyRegex, only one option is expected to be configured at a time.",
                "type": "string"
              },
              "tag_name": {
                "description": "TagName represents the name of the resource attribute that will be added to logs, metrics or spans. When not specified, a default tag name will be used of the format: - k8s.pod.annotations.\u003cannotation key\u003e - k8s.pod.labels.\u003clabel key\u003e For example, if tag_name is not specified and the key is git_sha, then the attribute name will be `k8s.pod.annotations.git_sha`. When key_regex is present, tag_name supports back reference to both named capturing and positioned capturing. For example, if your pod spec contains the following labels, app.kubernetes.io/component: mysql app.kubernetes.io/version: 5.7.21 and you'd like to add tags for all labels with prefix app.kubernetes.io/ and also trim the prefix, then you can specify the following extraction rules: extract: labels: - tag_name: $$1 key_regex: kubernetes.io/(.*) this will add the `component` and `version` tags to the spans or metrics.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "metadata": {
          "description": "Metadata allows to extract pod/namespace/node metadata from a list of metadata fields. The field accepts a list of strings. Metadata fields supported right now are, k8s.pod.name, k8s.pod.uid, k8s.deployment.name, k8s.node.name, k8s.namespace.name, k8s.pod.start_time, k8s.replicaset.name, k8s.replicaset.uid, k8s.daemonset.name, k8s.daemonset.uid, k8s.job.name, k8s.job.uid, k8s.cronjob.name, k8s.cronjob.uid, k8s.statefulset.name, k8s.statefulset.uid, k8s.container.name, container.id, container.image.name, container.image.tag, container.image.repo_digests k8s.cluster.uid Specifying anything other than these values will result in an error. By default, the following fields are extracted and added to spans, metrics and logs as resource attributes: - k8s.pod.name - k8s.pod.uid - k8s.pod.start_time - k8s.namespace.name - k8s.node.name - k8s.deployment.name (if the pod is controlled by a deployment) - k8s.container.name (requires an additional attribute to be set: container.id) - container.image.name (requires one of the following additional attributes to be set: container.id or k8s.container.name) - container.image.tag (requires one of the following additional attributes to be set: container.id or k8s.container.name)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "otel_annotations": {
          "description": "OtelAnnotations extracts all pod annotations with the prefix \"resource.opentelemetry.io\" as resource attributes E.g. \"resource.opentelemetry.io/foo\" becomes \"foo\"",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "filter": {
      "description": "Filter section allows specifying filters to filter pods by labels, fields, namespaces, nodes, etc.",
      "properties": {
        "fields": {
          "description": "Fields allows to filter pods by generic k8s fields. Only the following operations are supported: - equals - not-equals Check FieldFilterConfig for more details.",
          "items": {
            "properties": {
              "key": {
                "description": "Key represents the key or name of the field or labels that a filter can apply on.",
                "type": "string"
              },
              "op": {
                "description": "Op represents the filter operation to apply on the given Key: Value pair. The following operations are supported equals, not-equals, exists, does-not-exist.",
                "type": "string"
              },
              "value": {
                "description": "Value represents the value associated with the key that a filter operation specified by the `Op` field applies on.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "labels": {
          "description": "Labels allows to filter pods by generic k8s pod labels. Only the following operations are supported: - equals - not-equals - exists - not-exists Check FieldFilterConfig for more details.",
          "items": {
            "properties": {
              "key": {
                "description": "Key represents the key or name of the field or labels that a filter can apply on.",
                "type": "string"
              },
              "op": {
                "description": "Op represents the filter operation to apply on the given Key: Value pair. The following operations are supported equals, not-equals, exists, does-not-exist.",
                "type": "string"
              },
              "value": {
                "description": "Value represents the value associated with the key that a filter operation specified by the `Op` field applies on.",
                "type": "string"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "namespace": {
          "description": "Namespace filters all pods by the provided namespace. All other pods are ignored.",
          "type": "string"
        },
        "node": {
          "description": "Node represents a k8s node or host. If specified, any pods not running on the specified node will be ignored by the tagger.",
          "type": "string"
        },
        "node_from_env_var": {
          "description": "NodeFromEnv can be used to extract the node name from an environment variable. The value must be the name of the environment variable. This is useful when the node a Otel agent will run on cannot be predicted. In such cases, the Kubernetes downward API can be used to add the node name to each pod as an environment variable. K8s tagger can then read this value and filter pods by it. For example, node name can be passed to each agent with the downward API as follows env: - name: K8S_NODE_NAME valueFrom: fieldRef: fieldPath: spec.nodeName Then the NodeFromEnv field can be set to `K8S_NODE_NAME` to filter all pods by the node that the agent is running on. More on downward API here: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/",
          "type": "string"
        }
      },
      "type": "object"
    },
    "passthrough": {
      "description": "Passthrough mode only annotates resources with the pod IP and does not try to extract any other metadata. It does not need access to the K8S cluster API. Agent/Collector must receive spans directly from services to be able to correctly detect the pod IPs.",
      "type": "boolean"
    },
    "pod_association": {
      "description": "Association section allows to define rules for tagging spans, metrics, and logs with Pod metadata.",
      "items": {
        "properties": {
          "sources": {
            "description": "List of pod association sources which should be taken to identify pod",
            "items": {
              "properties": {
                "from": {
                  "description": "From represents the source of the association. Allowed values are \"connection\" and \"resource_attribute\".",
                  "type": "string"
                },
                "name": {
                  "description": "Name represents extracted key name. e.g. ip, pod_uid, k8s.pod.ip",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "wait_for_metadata": {
      "description": "WaitForMetadata is a flag that determines if the processor should wait k8s metadata to be synced when starting.",
      "type": "boolean"
    },
    "wait_for_metadata_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}