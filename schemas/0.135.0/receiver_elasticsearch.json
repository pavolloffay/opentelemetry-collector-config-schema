{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "auth": {
      "properties": {
        "authenticator": {
          "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "collection_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "compression": {
      "description": "The compression key for supported compression types within collector.",
      "type": "string"
    },
    "compression_params": {
      "description": "Advanced configuration options for the Compression",
      "properties": {
        "level": {
          "type": "integer"
        }
      },
      "type": "object"
    },
    "cookies": {
      "description": "Cookies configures the cookie management of the HTTP client.",
      "properties": {
        "enabled": {
          "description": "Enabled if true, cookies from HTTP responses will be reused in further HTTP requests with the same server.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "disable_keep_alives": {
      "description": "DisableKeepAlives, if true, disables HTTP keep-alives and will only use the connection to the server for a single HTTP request. WARNING: enabling this option can result in significant overhead establishing a new HTTP(S) connection for every request. Before enabling this option please consider whether changes to idle connection settings can achieve your goal.",
      "type": "boolean"
    },
    "endpoint": {
      "description": "The target URL to send data to (e.g.: http://some.url:9411/v1/traces).",
      "type": "string"
    },
    "force_attempt_http2": {
      "description": "Enabling ForceAttemptHTTP2 forces the HTTP transport to use the HTTP/2 protocol. By default, this is set to true. NOTE: HTTP/2 does not support settings such as MaxConnsPerHost, MaxIdleConnsPerHost and MaxIdleConns.",
      "type": "boolean"
    },
    "headers": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Additional headers attached to each HTTP request sent by the client. Existing header values are overwritten if collision happens. Header values are opaque since they may be sensitive.",
      "type": "object"
    },
    "http2_ping_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "http2_read_idle_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "idle_conn_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "indices": {
      "description": "Indices defines the indices to scrape. See https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-stats.html#index-stats-api-path-params for which names are viable. If Indices is empty, no indices will be scraped.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "initial_delay": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "max_conns_per_host": {
      "description": "MaxConnsPerHost limits the total number of connections per host, including connections in the dialing, active, and idle states. Default is 0 (unlimited).",
      "type": "integer"
    },
    "max_idle_conns": {
      "description": "MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open. By default, it is set to 100. Zero means no limit.",
      "type": "integer"
    },
    "max_idle_conns_per_host": {
      "description": "MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open. Default is 0 (unlimited).",
      "type": "integer"
    },
    "metrics": {
      "properties": {
        "elasticsearch.breaker.memory.estimated": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.breaker.memory.limit": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.breaker.tripped": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.data_nodes": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.health": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.in_flight_fetch": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.indices.cache.evictions": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.nodes": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.pending_tasks": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.published_states.differences": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.published_states.full": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.shards": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.state_queue": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.state_update.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.cluster.state_update.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.cache.evictions": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.cache.memory.usage": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.cache.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.documents": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.operations.completed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.operations.merge.current": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.operations.merge.docs_count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.operations.merge.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.operations.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.segments.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.segments.memory": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.segments.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.shards.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.translog.operations": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.translog.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.indexing_pressure.memory.limit": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.indexing_pressure.memory.total.primary_rejections": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.indexing_pressure.memory.total.replica_rejections": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.memory.indexing_pressure": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cache.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cache.evictions": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cache.memory.usage": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cache.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cluster.connections": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.cluster.io": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.disk.io.read": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.disk.io.write": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.documents": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.fs.disk.available": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.fs.disk.free": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.fs.disk.total": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.http.connections": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.ingest.documents": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.ingest.documents.current": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.ingest.operations.failed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.open_files": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.operations.completed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.operations.current": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.operations.get.completed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.operations.get.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.operations.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.pipeline.ingest.documents.current": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.pipeline.ingest.documents.preprocessed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.pipeline.ingest.operations.failed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.script.cache_evictions": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.script.compilation_limit_triggered": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.script.compilations": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.segments.memory": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.shards.data_set.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.shards.reserved.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.shards.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.thread_pool.tasks.finished": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.thread_pool.tasks.queued": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.thread_pool.threads": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.translog.operations": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.translog.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.translog.uncommitted.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.os.cpu.load_avg.15m": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.os.cpu.load_avg.1m": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.os.cpu.load_avg.5m": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.os.cpu.usage": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.os.memory": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.process.cpu.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.process.cpu.usage": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "elasticsearch.process.memory.virtual": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.classes.loaded": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.gc.collections.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.gc.collections.elapsed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.heap.committed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.heap.max": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.heap.used": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.heap.utilization": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.nonheap.committed": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.nonheap.used": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.pool.max": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.memory.pool.used": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "jvm.threads.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "middlewares": {
      "description": "Middlewares are used to add custom functionality to the HTTP client. Middleware handlers are called in the order they appear in this list, with the first middleware becoming the outermost handler.",
      "items": {
        "properties": {
          "id": {
            "description": "ID specifies the name of the extension to use.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "nodes": {
      "description": "Nodes defines the nodes to scrape. See https://www.elastic.co/guide/en/elasticsearch/reference/7.9/cluster.html#cluster-nodes for which selectors may be used here. If Nodes is empty, no nodes will be scraped.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "password": {
      "description": "Password is the password used when making REST calls to elasticsearch. Must be specified if Username is. Not required.",
      "type": "string"
    },
    "proxy_url": {
      "description": "ProxyURL setting for the collector",
      "type": "string"
    },
    "read_buffer_size": {
      "description": "ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize. Default is 0.",
      "type": "integer"
    },
    "resource_attributes": {
      "properties": {
        "elasticsearch.cluster.name": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "elasticsearch.index.name": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.name": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "elasticsearch.node.version": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "skip_cluster_metrics": {
      "description": "SkipClusterMetrics indicates whether cluster level metrics from /_cluster/* endpoints should be scraped or not.",
      "type": "boolean"
    },
    "timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "tls": {
      "description": "TLS struct exposes TLS client configuration.",
      "properties": {
        "ca_file": {
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
          "type": "string"
        },
        "ca_pem": {
          "description": "In memory PEM encoded cert. (optional)",
          "type": "string"
        },
        "cert_file": {
          "description": "Path to the TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cert_pem": {
          "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cipher_suites": {
          "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "curve_preferences": {
          "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include_system_ca_certs_pool": {
          "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
          "type": "boolean"
        },
        "insecure": {
          "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
          "type": "boolean"
        },
        "insecure_skip_verify": {
          "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
          "type": "boolean"
        },
        "key_file": {
          "description": "Path to the TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "key_pem": {
          "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "max_version": {
          "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
          "type": "string"
        },
        "min_version": {
          "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
          "type": "string"
        },
        "reload_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "server_name_override": {
          "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
          "type": "string"
        },
        "tpm": {
          "description": "Trusted platform module configuration",
          "properties": {
            "auth": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "owner_auth": {
              "type": "string"
            },
            "path": {
              "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "username": {
      "description": "Username is the username used when making REST calls to elasticsearch. Must be specified if Password is. Not required.",
      "type": "string"
    },
    "write_buffer_size": {
      "description": "WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize. Default is 0.",
      "type": "integer"
    }
  },
  "type": "object"
}