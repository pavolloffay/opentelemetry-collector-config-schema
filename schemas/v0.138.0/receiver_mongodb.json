{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "ca_file": {
      "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
      "type": "string"
    },
    "ca_pem": {
      "description": "In memory PEM encoded cert. (optional)",
      "type": "string"
    },
    "cert_file": {
      "description": "Path to the TLS cert to use for TLS required connections. (optional)",
      "type": "string"
    },
    "cert_pem": {
      "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
      "type": "string"
    },
    "cipher_suites": {
      "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "collection_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "curve_preferences": {
      "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "direct_connection": {
      "type": "boolean"
    },
    "hosts": {
      "description": "Deprecated - Transport option will be removed in v0.102.0",
      "items": {
        "properties": {
          "dialer": {
            "description": "DialerConfig contains options for connecting to an address.",
            "properties": {
              "timeout": {
                "description": "Duration string (e.g., '1s', '5m', '1h')",
                "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                "type": "string"
              }
            },
            "type": "object"
          },
          "endpoint": {
            "description": "Endpoint configures the address for this network connection. The address has the form \"host:port\". The host must be a literal IP address, or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name. If the host is a literal IPv6 address it must be enclosed in square brackets, as in \"[2001:db8::1]:80\" or \"[fe80::1%zone]:80\". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "include_system_ca_certs_pool": {
      "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
      "type": "boolean"
    },
    "initial_delay": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "insecure": {
      "description": "In gRPC and HTTP when set to true, this is used to disable the client transport security. See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional, default false)",
      "type": "boolean"
    },
    "insecure_skip_verify": {
      "description": "InsecureSkipVerify will enable TLS but not verify the certificate.",
      "type": "boolean"
    },
    "key_file": {
      "description": "Path to the TLS key to use for TLS required connections. (optional)",
      "type": "string"
    },
    "key_pem": {
      "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
      "type": "string"
    },
    "max_version": {
      "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
      "type": "string"
    },
    "metrics": {
      "properties": {
        "mongodb.active.reads": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.active.writes": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.cache.operations": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.collection.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.commands.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.connection.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.cursor.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.cursor.timeout.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.data.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.database.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.deletes.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.document.operation.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.extent.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.flushes.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.getmores.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.global_lock.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.health": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.index.access.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.index.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.index.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.inserts.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.lock.acquire.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.lock.acquire.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.lock.acquire.wait_count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.lock.deadlock.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.memory.usage": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.network.io.receive": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.network.io.transmit": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.network.request.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.object.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.operation.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.operation.latency.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.operation.repl.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.operation.time": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.page_faults": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.queries.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_commands_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_deletes_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_getmores_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_inserts_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_queries_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.repl_updates_per_sec": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.session.count": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.storage.size": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.updates.rate": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.uptime": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "mongodb.wtcache.bytes.read": {
          "properties": {
            "enabled": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "min_version": {
      "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
      "type": "string"
    },
    "password": {
      "type": "string"
    },
    "reload_interval": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "replica_set": {
      "type": "string"
    },
    "resource_attributes": {
      "properties": {
        "database": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "server.address": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "server.port": {
          "properties": {
            "enabled": {
              "type": "boolean"
            },
            "metrics_exclude": {
              "description": "Experimental: MetricsExclude defines a list of filters for attribute values. If the list is not empty, metrics with matching resource attribute values will not be emitted. MetricsInclude has higher priority than MetricsExclude.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "metrics_include": {
              "description": "Experimental: MetricsInclude defines a list of filters for attribute values. If the list is not empty, only metrics with matching resource attribute values will be emitted.",
              "items": {
                "properties": {
                  "regexp": {
                    "type": "string"
                  },
                  "strict": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "server_name_override": {
      "description": "ServerName requested by client for virtual hosting. This sets the ServerName in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
      "type": "string"
    },
    "timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "tpm": {
      "description": "Trusted platform module configuration",
      "properties": {
        "auth": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "owner_auth": {
          "type": "string"
        },
        "path": {
          "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "username": {
      "type": "string"
    }
  },
  "title": "Config Configuration",
  "type": "object"
}