{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "inputconfig": {
      "properties": {
        "allow_skip_pri_header": {
          "type": "boolean"
        },
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "enable_octet_counting": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "max_octets": {
          "type": "integer"
        },
        "non_transparent_framing_trailer": {
          "type": "string"
        },
        "on_error": {
          "type": "string"
        },
        "output": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "protocol": {
          "type": "string"
        },
        "resource": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "tcp": {
          "properties": {
            "add_attributes": {
              "type": "boolean"
            },
            "encoding": {
              "type": "string"
            },
            "listen_address": {
              "type": "string"
            },
            "max_log_size": {
              "type": "integer"
            },
            "multiline": {
              "properties": {
                "line_end_pattern": {
                  "type": "string"
                },
                "line_start_pattern": {
                  "type": "string"
                },
                "omit_pattern": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "one_log_per_packet": {
              "type": "boolean"
            },
            "tls": {
              "properties": {
                "ca_file": {
                  "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
                  "type": "string"
                },
                "ca_pem": {
                  "description": "In memory PEM encoded cert. (optional)",
                  "type": "string"
                },
                "cert_file": {
                  "description": "Path to the TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cert_pem": {
                  "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "cipher_suites": {
                  "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "client_ca_file": {
                  "description": "Path to the TLS cert to use by the server to verify a client certificate. (optional) This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
                  "type": "string"
                },
                "client_ca_file_reload": {
                  "description": "Reload the ClientCAs file when it is modified (optional, default false)",
                  "type": "boolean"
                },
                "curve_preferences": {
                  "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
                  "items": {
                    "type": "string"
                  },
                  "type": "array"
                },
                "include_system_ca_certs_pool": {
                  "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
                  "type": "boolean"
                },
                "key_file": {
                  "description": "Path to the TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "key_pem": {
                  "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
                  "type": "string"
                },
                "max_version": {
                  "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
                  "type": "string"
                },
                "min_version": {
                  "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
                  "type": "string"
                },
                "reload_interval": {
                  "description": "Duration string (e.g., '1s', '5m', '1h')",
                  "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
                  "type": "string"
                },
                "tpm": {
                  "description": "Trusted platform module configuration",
                  "properties": {
                    "auth": {
                      "type": "string"
                    },
                    "enabled": {
                      "type": "boolean"
                    },
                    "owner_auth": {
                      "type": "string"
                    },
                    "path": {
                      "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "trimconfig": {
              "properties": {
                "preserve_leading_whitespaces": {
                  "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "type": {
          "type": "string"
        },
        "udp": {
          "properties": {
            "add_attributes": {
              "type": "boolean"
            },
            "async": {
              "properties": {
                "max_queue_length": {
                  "type": "integer"
                },
                "processors": {
                  "type": "integer"
                },
                "readers": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "encoding": {
              "type": "string"
            },
            "listen_address": {
              "type": "string"
            },
            "multiline": {
              "properties": {
                "line_end_pattern": {
                  "type": "string"
                },
                "line_start_pattern": {
                  "type": "string"
                },
                "omit_pattern": {
                  "type": "boolean"
                }
              },
              "type": "object"
            },
            "one_log_per_packet": {
              "type": "boolean"
            },
            "trimconfig": {
              "properties": {
                "preserve_leading_whitespaces": {
                  "type": "boolean"
                },
                "preserve_trailing_whitespaces": {
                  "type": "boolean"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "operators": {
      "items": {
        "type": "object"
      },
      "type": "array"
    },
    "retry_on_failure": {
      "properties": {
        "enabled": {
          "description": "Enabled indicates whether to not retry sending logs in case of receiving a retryable error from a downstream consumer. Default is false.",
          "type": "boolean"
        },
        "initial_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "max_elapsed_time": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "max_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "storage": {
      "type": "object"
    }
  },
  "type": "object"
}