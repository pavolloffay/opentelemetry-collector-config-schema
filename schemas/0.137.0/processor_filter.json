{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "error_mode": {
      "description": "ErrorMode determines how the processor reacts to errors that occur while processing an OTTL condition. Valid values are `ignore` and `propagate`. `ignore` means the processor ignores errors returned by conditions and continues on to the next condition. This is the recommended mode. `propagate` means the processor returns the error up the pipeline.  This will result in the payload being dropped from the collector. The default value is `propagate`.",
      "type": "string"
    },
    "logs": {
      "properties": {
        "exclude": {
          "description": "Exclude match properties describe logs that should be excluded from the Collector Service pipeline, all other logs should be included. If both Include and Exclude are specified, Include filtering occurs first.",
          "properties": {
            "bodies": {
              "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "description": "LogMatchType specifies the type of matching desired",
              "type": "string"
            },
            "record_attributes": {
              "description": "RecordAttributes defines a list of possible record attributes to match logs against. A match occurs if any record attribute matches at least one expression in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "resource_attributes": {
              "description": "ResourceAttributes defines a list of possible resource attributes to match logs against. A match occurs if any resource attribute matches all expressions in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "severity_number": {
              "description": "SeverityNumberProperties defines how to match against a log record's SeverityNumber, if defined.",
              "properties": {
                "match_undefined": {
                  "description": "MatchUndefined lets logs records with \"unknown\" severity match. If MinSeverity is not set, this field is ignored, as fields are not matched based on severity.",
                  "type": "boolean"
                },
                "min": {
                  "description": "Min is the minimum severity needed for the log record to match. This corresponds to the short names specified here: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#displaying-severity this field is case-insensitive (\"INFO\" == \"info\")",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "severity_texts": {
              "description": "SeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "include": {
          "description": "Include match properties describe logs that should be included in the Collector Service pipeline, all other logs should be dropped from further processing. If both Include and Exclude are specified, Include filtering occurs first.",
          "properties": {
            "bodies": {
              "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "description": "LogMatchType specifies the type of matching desired",
              "type": "string"
            },
            "record_attributes": {
              "description": "RecordAttributes defines a list of possible record attributes to match logs against. A match occurs if any record attribute matches at least one expression in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "resource_attributes": {
              "description": "ResourceAttributes defines a list of possible resource attributes to match logs against. A match occurs if any resource attribute matches all expressions in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "severity_number": {
              "description": "SeverityNumberProperties defines how to match against a log record's SeverityNumber, if defined.",
              "properties": {
                "match_undefined": {
                  "description": "MatchUndefined lets logs records with \"unknown\" severity match. If MinSeverity is not set, this field is ignored, as fields are not matched based on severity.",
                  "type": "boolean"
                },
                "min": {
                  "description": "Min is the minimum severity needed for the log record to match. This corresponds to the short names specified here: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#displaying-severity this field is case-insensitive (\"INFO\" == \"info\")",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "severity_texts": {
              "description": "SeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "log_record": {
          "description": "LogConditions is a list of OTTL conditions for an ottllog context. If any condition resolves to true, the log event will be dropped. Supports `and`, `or`, and `()`",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "metrics": {
      "properties": {
        "datapoint": {
          "description": "DataPointConditions is a list of OTTL conditions for an ottldatapoint context. If any condition resolves to true, the datapoint will be dropped. Supports `and`, `or`, and `()`",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "exclude": {
          "description": "Exclude match properties describe metrics that should be excluded from the Collector Service pipeline, all other metrics should be included. If both Include and Exclude are specified, Include filtering occurs first.",
          "properties": {
            "expressions": {
              "description": "Expressions specifies the list of expr expressions to match metrics against. A match occurs if any datapoint in a metric matches at least one expression in this list.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "description": "MatchType specifies the type of matching desired",
              "type": "string"
            },
            "metric_names": {
              "description": "MetricNames specifies the list of string patterns to match metric names against. A match occurs if the metric name matches at least one string pattern in this list.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "regexp": {
              "description": "RegexpConfig specifies options for the MetricRegexp match type",
              "properties": {
                "cacheenabled": {
                  "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
                  "type": "boolean"
                },
                "cachemaxnumentries": {
                  "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "resource_attributes": {
              "description": "ResourceAttributes defines a list of possible resource attributes to match metrics against. A match occurs if any resource attribute matches all expressions in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "include": {
          "description": "Include match properties describe metrics that should be included in the Collector Service pipeline, all other metrics should be dropped from further processing. If both Include and Exclude are specified, Include filtering occurs first.",
          "properties": {
            "expressions": {
              "description": "Expressions specifies the list of expr expressions to match metrics against. A match occurs if any datapoint in a metric matches at least one expression in this list.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "description": "MatchType specifies the type of matching desired",
              "type": "string"
            },
            "metric_names": {
              "description": "MetricNames specifies the list of string patterns to match metric names against. A match occurs if the metric name matches at least one string pattern in this list.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "regexp": {
              "description": "RegexpConfig specifies options for the MetricRegexp match type",
              "properties": {
                "cacheenabled": {
                  "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
                  "type": "boolean"
                },
                "cachemaxnumentries": {
                  "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "resource_attributes": {
              "description": "ResourceAttributes defines a list of possible resource attributes to match metrics against. A match occurs if any resource attribute matches all expressions in this given list.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "metric": {
          "description": "MetricConditions is a list of OTTL conditions for an ottlmetric context. If any condition resolves to true, the metric will be dropped. Supports `and`, `or`, and `()`",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "regexp": {
          "description": "RegexpConfig specifies options for the regexp match type",
          "properties": {
            "cacheenabled": {
              "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
              "type": "boolean"
            },
            "cachemaxnumentries": {
              "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
              "type": "integer"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "spans": {
      "properties": {
        "exclude": {
          "description": "Exclude specifies when this processor will not be applied to the input data which match the specified properties. Note: The `exclude` properties are checked after the `include` properties, if they exist, are checked. If `include` isn't specified, the `exclude` properties are checked against all input data. This is an optional field. If neither `include` and `exclude` are set, all input data is processed. If `exclude` is set and `include` isn't set, then all the input data that does not match the properties in this structure are processed.",
          "properties": {
            "attributes": {
              "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "libraries": {
              "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "log_bodies": {
              "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "log_severity_number": {
              "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
              "properties": {
                "match_undefined": {
                  "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
                  "type": "boolean"
                },
                "min": {
                  "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "log_severity_texts": {
              "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "type": "string"
            },
            "metric_names": {
              "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "regexp": {
              "properties": {
                "cacheenabled": {
                  "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
                  "type": "boolean"
                },
                "cachemaxnumentries": {
                  "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "resources": {
              "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "services": {
              "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "span_kinds": {
              "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "span_names": {
              "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "include": {
          "description": "Include specifies the set of input data properties that must be present in order for this processor to apply to it. Note: If `exclude` is specified, the input data is compared against those properties after the `include` properties. This is an optional field. If neither `include` and `exclude` are set, all input data are processed. If `include` is set and `exclude` isn't set, then all input data matching the properties in this structure are processed.",
          "properties": {
            "attributes": {
              "description": "Attributes specifies the list of attributes to match against. All of these attributes must match for a match to occur. This is an optional field.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "libraries": {
              "description": "Libraries specify the list of items to match the implementation library against. A match occurs if the span's implementation library matches at least one item in this list. This is an optional field.",
              "items": {
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "version": {
                    "description": "version match expected actual  match nil      \u003cblank\u003e yes nil      1       yes \u003cblank\u003e  \u003cblank\u003e yes \u003cblank\u003e  1       no 1        \u003cblank\u003e no 1        1       yes",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "log_bodies": {
              "description": "LogBodies is a list of strings that the LogRecord's body field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "log_severity_number": {
              "description": "LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.",
              "properties": {
                "match_undefined": {
                  "description": "MatchUndefined controls whether logs with \"undefined\" severity matches. If this is true, entries with undefined severity will match.",
                  "type": "boolean"
                },
                "min": {
                  "description": "Min is the lowest severity that may be matched. e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "log_severity_texts": {
              "description": "LogSeverityTexts is a list of strings that the LogRecord's severity text field must match against.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "match_type": {
              "type": "string"
            },
            "metric_names": {
              "description": "MetricNames is a list of strings to match metric name against. A match occurs if metric name matches at least one item in the list. This field is optional.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "regexp": {
              "properties": {
                "cacheenabled": {
                  "description": "CacheEnabled determines whether match results are LRU cached to make subsequent matches faster. Cache size is unlimited unless CacheMaxNumEntries is also specified.",
                  "type": "boolean"
                },
                "cachemaxnumentries": {
                  "description": "CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results. CacheMaxNumEntries is ignored if CacheEnabled is false.",
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "resources": {
              "description": "Resources specify the list of items to match the resources against. A match occurs if the data's resources match at least one item in this list. This is an optional field.",
              "items": {
                "properties": {
                  "key": {
                    "description": "Key specifies the attribute key.",
                    "type": "string"
                  },
                  "value": {
                    "additionalProperties": true,
                    "description": "Values specifies the value to match against. If it is not set, any value will match.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "type": "array"
            },
            "services": {
              "description": "Services specify the list of items to match service name against. A match occurs if the span's service name matches at least one item in this list. This is an optional field.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "span_kinds": {
              "description": "SpanKinds specify the list of items to match the span kind against. A match occurs if the span's span kind matches at least one item in this list. This is an optional field",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "span_names": {
              "description": "SpanNames specify the list of items to match span name against. A match occurs if the span name matches at least one item in this list. This is an optional field.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "traces": {
      "properties": {
        "span": {
          "description": "SpanConditions is a list of OTTL conditions for an ottlspan context. If any condition resolves to true, the span will be dropped. Supports `and`, `or`, and `()`",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "spanevent": {
          "description": "SpanEventConditions is a list of OTTL conditions for an ottlspanevent context. If any condition resolves to true, the span event will be dropped. Supports `and`, `or`, and `()`",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "type": "object"
}