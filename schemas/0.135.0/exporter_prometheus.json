{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "properties": {
    "add_metric_suffixes": {
      "deprecated": true,
      "description": "AddMetricSuffixes controls whether suffixes are added to metric names. Defaults to true. Deprecated: Use TranslationStrategy instead. This setting is ignored when TranslationStrategy is explicitly set.",
      "type": "boolean"
    },
    "auth": {
      "properties": {
        "authenticator": {
          "description": "AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.",
          "type": "object"
        },
        "request_params": {
          "description": "RequestParameters is a list of parameters that should be extracted from the request and added to the context. When a parameter is found in both the query string and the header, the value from the query string will be used.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "compression_algorithms": {
      "description": "CompressionAlgorithms configures the list of compression algorithms the server can accept. Default: [\"\", \"gzip\", \"zstd\", \"zlib\", \"snappy\", \"deflate\"]",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "const_labels": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "ConstLabels are values that are applied for every exported metric.",
      "type": "object"
    },
    "cors": {
      "properties": {
        "allowed_headers": {
          "description": "AllowedHeaders sets what headers will be allowed in CORS requests. The Accept, Accept-Language, Content-Type, and Content-Language headers are implicitly allowed. If no headers are listed, X-Requested-With will also be accepted by default. Include \"*\" to allow any request header.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "allowed_origins": {
          "description": "AllowedOrigins sets the allowed values of the Origin header for HTTP/JSON requests to an OTLP receiver. An origin may contain a wildcard (*) to replace 0 or more characters (e.g., \"http://*.domain.com\", or \"*\" to allow any origin).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "max_age": {
          "description": "MaxAge sets the value of the Access-Control-Max-Age response header. Set it to the number of seconds that browsers should cache a CORS preflight response for.",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "enable_open_metrics": {
      "description": "EnableOpenMetrics enables the use of the OpenMetrics encoding option for the prometheus exporter.",
      "type": "boolean"
    },
    "endpoint": {
      "description": "Endpoint configures the listening address for the server.",
      "type": "string"
    },
    "idle_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "include_metadata": {
      "description": "IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers",
      "type": "boolean"
    },
    "max_request_body_size": {
      "description": "MaxRequestBodySize sets the maximum request body size in bytes. Default: 20MiB.",
      "type": "integer"
    },
    "metric_expiration": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "middlewares": {
      "description": "Middlewares are used to add custom functionality to the HTTP server. Middleware handlers are called in the order they appear in this list, with the first middleware becoming the outermost handler.",
      "items": {
        "properties": {
          "id": {
            "description": "ID specifies the name of the extension to use.",
            "type": "object"
          }
        },
        "type": "object"
      },
      "type": "array"
    },
    "namespace": {
      "description": "Namespace if set, exports metrics under the provided value.",
      "type": "string"
    },
    "read_header_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "read_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    },
    "resource_to_telemetry_conversion": {
      "description": "ResourceToTelemetrySettings defines configuration for converting resource attributes to metric labels.",
      "properties": {
        "enabled": {
          "description": "Enabled indicates whether to convert resource attributes to telemetry attributes. Default is `false`.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "response_headers": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Additional headers attached to each HTTP response sent to the client. Header values are opaque since they may be sensitive.",
      "type": "object"
    },
    "send_timestamps": {
      "description": "SendTimestamps will send the underlying scrape timestamp with the export",
      "type": "boolean"
    },
    "tls": {
      "properties": {
        "ca_file": {
          "description": "Path to the CA cert. For a client this verifies the server certificate. For a server this verifies client certificates. If empty uses system root CA. (optional)",
          "type": "string"
        },
        "ca_pem": {
          "description": "In memory PEM encoded cert. (optional)",
          "type": "string"
        },
        "cert_file": {
          "description": "Path to the TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cert_pem": {
          "description": "In memory PEM encoded TLS cert to use for TLS required connections. (optional)",
          "type": "string"
        },
        "cipher_suites": {
          "description": "CipherSuites is a list of TLS cipher suites that the TLS transport can use. If left blank, a safe default list is used. See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "client_ca_file": {
          "description": "Path to the TLS cert to use by the server to verify a client certificate. (optional) This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to https://godoc.org/crypto/tls#Config for more information. (optional)",
          "type": "string"
        },
        "client_ca_file_reload": {
          "description": "Reload the ClientCAs file when it is modified (optional, default false)",
          "type": "boolean"
        },
        "curve_preferences": {
          "description": "contains the elliptic curves that will be used in an ECDHE handshake, in preference order Defaults to empty list and \"crypto/tls\" defaults are used, internally.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "include_system_ca_certs_pool": {
          "description": "If true, load system CA certificates pool in addition to the certificates configured in this struct.",
          "type": "boolean"
        },
        "key_file": {
          "description": "Path to the TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "key_pem": {
          "description": "In memory PEM encoded TLS key to use for TLS required connections. (optional)",
          "type": "string"
        },
        "max_version": {
          "description": "MaxVersion sets the maximum TLS version that is acceptable. If not set, refer to crypto/tls for defaults. (optional)",
          "type": "string"
        },
        "min_version": {
          "description": "MinVersion sets the minimum TLS version that is acceptable. If not set, TLS 1.2 will be used. (optional)",
          "type": "string"
        },
        "reload_interval": {
          "description": "Duration string (e.g., '1s', '5m', '1h')",
          "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
          "type": "string"
        },
        "tpm": {
          "description": "Trusted platform module configuration",
          "properties": {
            "auth": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            },
            "owner_auth": {
              "type": "string"
            },
            "path": {
              "description": "The path to the TPM device or Unix domain socket. For instance /dev/tpm0 or /dev/tpmrm0.",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "translation_strategy": {
      "description": "TranslationStrategy controls how OTLP metric and attribute names are translated into Prometheus metric and label names. When set, this takes precedence over AddMetricSuffixes.",
      "type": "string"
    },
    "write_timeout": {
      "description": "Duration string (e.g., '1s', '5m', '1h')",
      "pattern": "^[0-9]+(ns|us|µs|ms|s|m|h)$",
      "type": "string"
    }
  },
  "type": "object"
}